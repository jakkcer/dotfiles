# dein.vim itself
[[plugins]]
repo = 'Shougo/dein.vim'

# vimproc.vim for asynchronus execution library
[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
if dein#util#_is_windows()
  let cmd = 'tools\\update-dll-mingw'
elseif dein#util#_is_cygwin()
  let cmd = 'make -f make_cygwin.mak'
elseif excutable('gmake')
  let cmd = 'gmake'
else
  let cmd = 'make'
endif
let g:dein#plugin.build = cmd
'''

# --------------------------------------------
# original settings
# --------------------------------------------

# color scheme lucario
[[plugins]]
repo = 'raphamorim/lucario'
hook_add = '''
augroup LucarioSetting
  autocmd!
  autocmd VimEnter * nested colorscheme lucario
  autocmd VimEnter * highlight LineNr ctermbg=236 " set bg color of line number
  autocmd VimEnter * highlight Type ctermfg=203 " set fg color of type char
  autocmd VimEnter * highlight Special ctermfg=14 " set fg color of special char
  autocmd VimEnter * highlight texMathZoneX ctermfg=10 " set fg color of latex equation
  autocmd VimEnter * highlight texMathZoneC ctermfg=10 " set fg color of latex equation
  autocmd VimEnter * highlight texMathMatcher ctermfg=10 " set fg color of latex equation
  autocmd VimEnter * highlight SignColumn ctermbg=236 " set bg color of git-gutter
  autocmd VimEnter * highlight Search cterm=NONE ctermfg=23 ctermbg=186 gui=NONE guifg=#2b3e50 guibg=#e6db74
augroup END

au InitAutoCmd VimEnter * :silent !echo -e "\033]50;SetProfile=vim-lucario\x7"
au InitAutoCmd VimLeave * :silent !echo -e "\033]50;SetProfile=spo-dev-operation\x7"
'''

# [[plugins]]
# repo = 'dracula/vim'
# hook_add = '''
# augroup DraculaSetting
#   autocmd!
#   autocmd VimEnter * nested colorscheme dracula
# augroup END
# au InitAutoCmd VimEnter * :silent !echo -e "\033]50;SetProfile=vim-dracula\x7"
# au InitAutoCmd VimLeave * :silent !echo -e "\033]50;SetProfile=jakkcer\x7"
# '''

# lightline.vim
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
set laststatus=2  " show status line alway
set showtabline=2  " show tab line alway
set noshowmode  " disable default previewing current mode function
set showcmd  " show command input under status line

let g:lightline = {
  \ 'colorscheme': 'powerline',
  \ 'active': {
  \   'left': [ ['mode', 'paste'],
  \             ['fugitive', 'readonly', 'filepath', 'modified'] ],
  \   'right': [ ['lineinfo'],
  \              ['percent'],
  \              ['fileformat', 'fileencoding', 'filetype'],
  \              ['lsp_errors', 'lsp_warnings', 'lsp_ok'] ]
  \ },
  \ 'inactive': {
  \   'left': [ ['fugitive', 'readonly', 'filepath', 'modified'] ],
  \   'right': [ ['lineinfo'],
  \              ['fileformat', 'fileencoding', 'filetype'] ]
  \ },
  \ 'component_function': {
  \   'readonly': 'LightlineReadonly',
  \   'filepath': 'FilePath',
  \   'filetype': 'LightlineFiletype',
  \   'fileformat': 'LightlineFileformat',
  \   'modified': 'LightlineModified',
  \   'fugitive': 'LightlineFugitive'
  \ },
  \ 'component_expand': {
  \   'lsp_warnings': 'LightlineLSPWarnings',
  \   'lsp_errors': 'LightlineLSPErrors',
  \   'lsp_ok': 'LightlineLSPOk',
  \ },
  \ 'component_type': {
  \   'lsp_warnings': 'warning',
  \   'lsp_errors': 'error',
  \   'lsp_ok': 'left',
  \ },
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '', 'right': '' }
\ }

function! FilePath()
  if winwidth(0) > 80
    return expand("%:s")
  else
    return expand("%:t")
  endif
endfunction

function! LightlineModified()
  return &modifiable && &modified ? '+' : ''
endfunction

function! LightlineReadonly()
  return &readonly ? '' : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 100 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! LightlineFileformat()
  return winwidth(0) > 100 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

function! LightlineFugitive()
  if exists('*FugitiveHead')
    let branch = FugitiveHead()
    return branch !=# '' ? ' '.branch : ''
  endif
  return ''
endfunction

" vim-lsp diagnostic setting
function! LightlineLSPWarnings() abort
  let l:counts = lsp#get_buffer_diagnostics_counts()
  return (l:counts.warning == 0 && l:counts.hint == 0) ? '' : printf('Warning:%d', l:counts.warning + l:counts.hint)
endfunction

function! LightlineLSPErrors() abort
  let l:counts = lsp#get_buffer_diagnostics_counts()
  return l:counts.error == 0 ? '' : printf('Error:%d', l:counts.error)
endfunction

function! LightlineLSPOk() abort
  let l:counts =  lsp#get_buffer_diagnostics_counts()
  let l:total = l:counts.error + l:counts.warning + l:counts.hint
  return l:total == 0 ? 'OK' : ''
endfunction

augroup LightLineOnLSP
  autocmd!
  autocmd User lsp_diagnostics_updated call lightline#update()
augroup END
'''

# vim devicons
[[plugins]]
repo = 'ryanoasis/vim-devicons'

# NERDTree syntax highlight with devicons
[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
depends = ['vim-devicons']
hook_add = '''
let g:WebDevIconsDisableDefaultFolderSymbolColorFromNERDTreeDir = 1
let g:WebDevIconsDisableDefaultFileSymbolColorFromNERDTreeFile = 1
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
let g:NERDTreeHighlightFolders = 1 " enables folder icon highlighting using exact match
let g:NERDTreeHighlightFoldersFullName = 1 " highlights the folder name
'''

# git wrapper
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nnoremap <silent> <Leader>gb :Gblame<CR>
nnoremap <silent> <Leader>gd :Gdiff<CR>
nnoremap <silent> <Leader>gs :Gstatus<CR>
nnoremap <silent> <Leader>gw :Gwrite<CR>
nnoremap <silent> <Leader>gc :Gcommit-v<CR>
nnoremap <silent> <Leader>gr :Gread<CR>
'''

# git diff preview plugin
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
if exists('&signcolumn')
    set signcolumn=yes
else
    let g:gitgutter_sign_cloumn_always = 1
endif
set updatetime=1000
nnoremap [gitgutter] <Nop>
nmap <C-h> [gitgutter]
nmap [gitgutter]j <Plug>GitGutterNextHunk
nmap [gitgutter]k <Plug>GitGutterPrevHunk
nmap <Leader>hs <Plug>GitGutterStageHunk
nmap <Leader>hu <Plug>GitGutterUndoHunk
nmap <Leader>hp <Plug>GitGutterPreviewHunk
'''

# visible indent line
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
set list listchars=tab:\¦\
let g:indentLine_color_term = 243
'''

# treeview for vim
[[plugins]]
repo = 'preservim/nerdtree'
hook_add = '''
map <silent> <C-n> :<C-u>NERDTreeToggle<CR>
map <silent> <Leader>nf :<C-u>NERDTreeFind<CR>
'''

# comment out plugin
[[plugins]]
repo = 'tomtom/tcomment_vim'

# enclosure
[[plugins]]
repo = 'tpope/vim-surround'

# repeat plugin command
[[plugins]]
repo = 'tpope/vim-repeat'

# stylish replace
[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
nnoremap <silent> <Leader>// :OverCommandLine<CR>%s/
nnoremap <silent> <Leader>sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
'''

# vim cheatsheat
[[plugins]]
repo = 'reireias/vim-cheatsheet'
hook_add = '''
let g:cheatsheet#cheat_file = '$HOME/.vim/vim_cheat.md'
'''

# vim-lsp
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
merged = '0'
hook_add = '''
let g:lsp_diagnostics_enabled = 1
let g:lsp_signs_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_preview_float = 1
let g:lsp_text_edit_enabled = 0
let g:lsp_async_completion = 1
let g:lsp_diagnostics_float_cursor = 1

" Folding
" set foldmethod=expr
"   \ foldexpr=lsp#ui#vim#folding#foldexpr()
"   \ foldtext=lsp#ui#vim#folding#foldtext()
"   \ foldcolumn=2
"   \ foldlevel=99
"   \ nofoldenable

augroup LspAutoFromatting
  autocmd!
  autocmd BufWritePre *.py,*.go LspDocumentFormatSync
augroup END

" let g:lsp_log_verbose = 1
" let g:lsp_log_file = expand('~/.vim/log/vim-lsp.log')

" mappings
function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete 
  nmap <silent> ]e <plug>(lsp-next-error)
  nmap <silent> [e <plug>(lsp-previous-error)
  nmap <silent> ]w <plug>(lsp-next-warning)
  nmap <silent> [w <plug>(lsp-previous-warning)
  nmap <silent> ]h <plug>(lsp-next-diagnostic)
  nmap <silent> [h <plug>(lsp-previous-diagnostic)

  nnoremap [vim-lsp] <Nop>
  nmap <Leader>l [vim-lsp]

  nmap [vim-lsp]d <plug>(lsp-definition)
  nmap [vim-lsp]v :vert LspDefinition<CR>
  nmap [vim-lsp]t :tab LspDefinition<CR>
  nmap [vim-lsp]p <plug>(lsp-peek-definition)
  nmap [vim-lsp]a <plug>(lsp-code-action)
  nmap [vim-lsp]g <plug>(lsp-document-diagnostics)
  nmap [vim-lsp]s <plug>(lsp-status)
  nmap [vim-lsp]r <plug>(lsp-rename)
  nmap [vim-lsp]c <plug>(lsp-references)
  nmap [vim-lsp]f <plug>(lsp-document-format)
  nmap [vim-lsp]h <plug>(lsp-hover)
  nmap [vim-lsp]y <plug>(lsp-type-definition)
  nmap [vim-lsp]l <plug>(lsp-preview-focus)
endfunction

augroup lsp_install
  au!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

autocmd! FileType qf nnoremap <buffer> <leader><Enter> <C-w><Enter><C-w>L
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
merged = '0'
hook_add = '''
let g:lsp_settings = {
\   'pyls-all': {
\     'blocklist': ['nerdtree'],
\   },
\}
'''

# completion
[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_min_chars = 3
let g:asyncomplete_popup_delay = 100
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" let g:asyncomplete_log_file = expand('~/.vim/log/asyncomplete.log')
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = ['asyncomplete.vim', 'vim-lsp']

# pairenthesis plugin
[[plugins]]
repo = 'jiangmiao/auto-pairs'

# next step
# 'kana/vim-operator-user', 'kana/vim-textobj-user'
